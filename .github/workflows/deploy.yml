name: Deploy to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions: {}

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: block
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            objects.githubusercontent.com:443
            raw.githubusercontent.com:443
            registry.npmjs.org:443
            nodejs.org:443
          disable-sudo: true
          disable-file-monitoring: false
          disable-telemetry: true

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          token: ${{ github.token }}
          fetch-depth: 1

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: 10.13.1

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: 20
          cache: "pnpm"

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Turbo cache
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        run: |
          echo "::group::Installing dependencies"
          pnpm install --frozen-lockfile
          echo "::endgroup::"
        continue-on-error: false

      - name: Build documentation
        run: |
          echo "::group::Building documentation site"
          pnpm run build
          echo "::endgroup::"

          # Verify build output exists
          if [ ! -d "./frontends/documentation/dist" ]; then
            echo "::error::Build failed - dist directory not found"
            exit 1
          fi

          # Check if build output contains expected files
          if [ ! -f "./frontends/documentation/dist/index.html" ]; then
            echo "::error::Build failed - index.html not found in dist directory"
            exit 1
          fi

          echo "::notice::Build completed successfully - dist directory contains $(find ./frontends/documentation/dist -type f | wc -l) files"
        continue-on-error: false

      - name: Setup Pages
        uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5.0.0
        continue-on-error: false

      - name: Upload artifact
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: "./frontends/documentation/dist"
        continue-on-error: false

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5
        continue-on-error: false

      - name: Report deployment success
        if: success()
        run: |
          echo "::notice title=Deployment Successful::Documentation site has been successfully deployed to GitHub Pages"
          echo "::notice title=Site URL::${{ steps.deployment.outputs.page_url }}"
          echo "### 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The documentation site has been successfully deployed to GitHub Pages." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Site URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

      - name: Report deployment failure
        if: failure()
        run: |
          echo "::error title=Deployment Failed::The deployment to GitHub Pages has failed. Check the workflow logs for details."
          echo "### ❌ Deployment Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The deployment to GitHub Pages has failed. Please check the workflow logs above for specific error details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Common issues to check:**" >> $GITHUB_STEP_SUMMARY
          echo "- Build errors in the documentation site" >> $GITHUB_STEP_SUMMARY
          echo "- Missing or corrupted dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Pages configuration issues" >> $GITHUB_STEP_SUMMARY
          echo "- Repository permissions or token issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Failure Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
